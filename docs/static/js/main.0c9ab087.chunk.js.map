{"version":3,"sources":["components/AddCategory.js","components/GifItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","newCategory","setNewCategory","className","onSubmit","e","preventDefault","trim","length","type","value","onChange","newValue","target","GifItem","title","image","src","alt","getGifs","search","a","fetch","encodeURI","resp","json","data","listGifs","map","gif","_id","id","images","original","url","GifGrid","category","loading","state","setState","useEffect","then","gifList","useFetchGifs","gifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"8LAsCeA,EAnCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACHC,mBAAS,IADN,mBAClCC,EADkC,KACrBC,EADqB,KAczC,OACE,0BAAMC,UAAU,2BAA2BC,SATxB,SAACC,GACpBA,EAAEC,iBACEL,EAAYM,OAAOC,OAAS,IAC9BT,GAAc,iBAAM,CAACE,MACrBC,EAAe,OAMf,yBAAKC,UAAU,wBACb,2BACEA,UAAU,eACVM,KAAK,OACLC,MAAOT,EACPU,SAnBkB,SAACN,GACzB,IAAMO,EAAWP,EAAEQ,OAAOH,MAC1BR,EAAeU,OAqBb,4BAAQT,UAAU,uBAAuBM,KAAK,UAA9C,YCTSK,EAhBC,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACxB,OACE,6BAASb,UAAU,+CACjB,yBAAKA,UAAU,iBAAiBc,IAAKD,EAAOE,IAAKH,IACjD,yBAAKZ,UAAU,aACb,wBAAIA,UAAU,cAAcY,M,uBCRvBI,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,4DACT,uCACG,mCAFM,SAIFC,MAAM,GAAD,OAHZ,uCAGY,cACVC,UAAUH,GADA,6BAFT,qCAFM,cAIfI,EAJe,gBAOEA,EAAKC,OAPP,uBAObC,EAPa,EAObA,KACFC,EAAWD,EAAKE,KAAI,SAACC,GACzB,MAAO,CACLC,IAAKD,EAAIE,GACThB,MAAOc,EAAId,MACXC,MAAOa,EAAIG,OAAOC,SAASC,QAZV,kBAgBdP,GAhBc,4CAAH,sDCyBLQ,EApBC,SAAC,GAAuB,IAAD,IAApBC,gBAAoB,MAAT,GAAS,ICFX,SAACA,GAAc,IAAD,EACdpC,mBAAS,CACjC0B,KAAM,GACNW,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRrB,EAAQiB,GAAUK,MAAK,SAACC,GACtBH,EAAS,CACPb,KAAMgB,EACNL,SAAS,SAGZ,CAACD,IAEGE,EDZ4BK,CAAaP,GAAlCM,EADuB,EAC7BhB,KAAeW,EADc,EACdA,QAEvB,OACE,yBAAKlC,UAAU,iBACb,4BAAKiC,EAAL,SACCC,GAAW,aACZ,6BAASlC,UAAU,yBAChBuC,EAAQd,KAAI,SAACgB,GAAD,OACX,kBAAC,EAAD,eAASC,IAAKD,EAAKd,KAASc,UEMvBE,EAjBM,WACnB,IADyB,EAEW9C,mBADb,CAAC,WADC,mBAElB+C,EAFkB,KAENhD,EAFM,KAIzB,OACE,oCACE,8CACA,6BACA,kBAAC,EAAD,CAAaA,cAAeA,IAE3BgD,EAAWnB,KAAI,SAACQ,GAAD,OACd,kBAAC,EAAD,CAASS,IAAKT,EAAUA,SAAUA,S,MCT1CY,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.0c9ab087.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategories }) => {\n  const [newCategory, setNewCategory] = useState(\"\");\n  const handleInputChange = (e) => {\n    const newValue = e.target.value;\n    setNewCategory(newValue);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (newCategory.trim().length > 2) {\n      setCategories(() => [newCategory]);\n      setNewCategory(\"\");\n    }\n  };\n\n  return (\n    <form className=\"form-inline add-category\" onSubmit={handleSubmit}>\n      <div className=\"form-group mb-2 mr-3\">\n        <input\n          className=\"form-control\"\n          type=\"text\"\n          value={newCategory}\n          onChange={handleInputChange}\n        />\n      </div>\n\n      <button className=\"btn btn-primary mb-2\" type=\"submit\">\n        search\n      </button>\n    </form>\n  );\n};\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst GifItem = ({ title, image }) => {\n  return (\n    <article className=\"card animate__animated animate__slideInLeft\">\n      <img className=\"card-image-top\" src={image} alt={title} />\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">{title}</h5>\n      </div>\n    </article>\n  );\n};\n\nGifItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  image: PropTypes.string,\n};\n\nexport default GifItem;\n","export const getGifs = async (search) => {\n  const url = \"https://api.giphy.com/v1/gifs/search\";\n  const apiKey = \"VjqslXeWE36lhDESYDaQLqqFZCHN2SgY\";\n\n  const resp = await fetch(\n    `${url}?q=${encodeURI(search)}&limit=10&api_key=${apiKey}`\n  );\n  const { data } = await resp.json();\n  const listGifs = data.map((gif) => {\n    return {\n      _id: gif.id,\n      title: gif.title,\n      image: gif.images.original.url,\n    };\n  });\n\n  return listGifs;\n};\n\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport GifItem from \"./GifItem\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nconst GifGrid = ({ category = \"\" }) => {\n  const { data: gifList, loading } = useFetchGifs(category);\n\n  return (\n    <div className=\"gif-container\">\n      <h3>{category} Gifs</h3>\n      {loading && \"Loading...\"}\n      <section className=\"gif-grid card-columns\">\n        {gifList.map((gifs) => (\n          <GifItem key={gifs._id} {...gifs} />\n        ))}\n      </section>\n    </div>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((gifList) => {\n      setState({\n        data: gifList,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\nconst GifExpertApp = () => {\n  const listCategories = [\"Naruto\"];\n  const [categories, setCategories] = useState(listCategories);\n\n  return (\n    <>\n      <h1>Gif Expert App</h1>\n      <hr></hr>\n      <AddCategory setCategories={setCategories} />\n\n      {categories.map((category) => (\n        <GifGrid key={category} category={category} />\n      ))}\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}